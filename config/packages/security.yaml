security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User:
            algorithm: bcrypt
    providers:
        in_memory: { memory: ~ }
        our_db_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            anonymous: ~
            http_basic: ~
            provider: our_db_provider
            logout:
                path:   /logout
                target: login
            form_login:
                provider: our_db_provider
                login_path: login
                check_path: login
                default_target_path: /Ey
                csrf_token_generator: security.csrf.token_manager
                csrf_parameter: _csrf_security_token
                csrf_token_id: a_private_string
        secured_area:
            form_login:
                provider: our_db_provider
                login_path: login
                check_path: login
                default_target_path: /Ey
                #csrf_token_generator: security.csrf.token_manager
                #csrf_parameter: _csrf_security_token
                #csrf_token_id: a_private_string


            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # require ROLE_ADMIN for /admin*
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
